#!/usr/bin/env bash
#
# Copyright (c) 2015 Joyent Inc., All rights reserved.
#
# Install Debian into a directory, modify the installation, then tar it up.
#

if [[ -n "$TRACE" ]]; then
  export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -o xtrace
fi

set -euo pipefail
IFS=$'\n\t'

GUESTTOOLS=guesttools
BUILD_DATE=$(date +%Y%m%d)

usage() {
cat <<EOF

Install and modify Debian in a given directory in a given directory using a given mirror

Usage:
  $0 -r <RELEASE> -d <INSTALL_DIR> -m <MIRROR> -i <IMAGE_NAME> -p <NAME> -D <DESC> -u <DOCS>

Example:
  $0 -r wheezy -d /data/chroot -m http://httpredir.debian.org/debian/ -i lx-debian-7 -p "Debian 7 LX Brand" -D "Debian 7 64-bit lx-brand image." -u https://docs.joyent.com/images/container-native-linux

OPTIONS:
  -r The desired release (e.g "wheezy")
  -d A path to the install directory
  -m A URL for the desired archive mirror
  -i The name of the image. This is used for naming the tarball.
  -p The proper name of the image. Use quotes. This is used in the MOTD and /etc/product file.
  -D A description for the image. This is used in the image manifest and the /etc/product file.
  -u A URL to the image docs [optional]
  -h Show this message

EOF
}

RELEASE=
INSTALL_DIR=
MIRROR=
IMAGE_NAME=
NAME=
DESC=
DOCS=

while getopts "hr:d:m:i:p:D:u:" OPTION
do
	case $OPTION in
		h)
			usage
			exit
			;;
		r)
			RELEASE=${OPTARG}
			;;
		d)
			INSTALL_DIR=${OPTARG%/}
			;;
		m)
			MIRROR=${OPTARG}
			;;
		i)
			IMAGE_NAME=${OPTARG}
			;;
		p)
			NAME=${OPTARG}
			;;
		D)
			DESC=${OPTARG}
			;;
		u)
			DOCS=${OPTARG}
			;;
		\?)
			usage
			exit
			;;
	esac
done

if [[ $# -eq 0 ]]; then
	usage
	exit 1
fi

if [[ -z ${RELEASE} ]]; then
	echo "Error: missing release (-r) value"
	exit 1
fi

if [[ ! -e ${INSTALL_DIR} ]] ; then
	echo "Directory $INSTALL_DIR not found"
	exit 1
fi

if [[ -z ${INSTALL_DIR} ]]; then
	echo "Error: missing install directory (-d) value"
	exit 1
fi

if [[ -z ${MIRROR} ]]; then
	echo "Error: missing mirror (-m) value"
	exit 1
fi

if [[ -z ${IMAGE_NAME} ]]; then
	echo "Error: missing image name (-i) value"
	exit 1
fi

if [[ -z ${NAME} ]]; then
	echo "Error: missing proper name (-p) value"
	exit 1
fi

TARGET="${IMAGE_NAME}-${BUILD_DATE}.tar.gz"

if [[ -z ${DOCS} ]]; then
	DOCS="https://docs.joyent.com/images/container-native-linux"
fi

umount_chroot() {
    if grep -qs "$INSTALL_DIR/dev/pts" $INSTALL_DIR/proc/mounts; then
        echo "====> Unmounting /dev/pts in chroot"
        umount -lf $INSTALL_DIR/dev/pts
    fi

    if grep -qs "$INSTALL_DIR/proc" $INSTALL_DIR/proc/mounts; then
        echo "====> Unmounting /proc in chroot"
        umount -lf $INSTALL_DIR/proc
    fi
}

echo "==> Installing Debian into $INSTALL_DIR"

if [[ -d $INSTALL_DIR ]]; then
	echo "====> Found previous chroot. Deleting and creating a new one."

	# umount previous /proc and /dev/pts if they exist
	umount_chroot

	rm -rf $INSTALL_DIR
	mkdir -p $INSTALL_DIR
fi

debootstrap --components=main \
	--include=acpid,apt-transport-https,ca-certificates,curl,dbus,gettext-base,keyboard-configuration,less,locales,ntp,openssh-server,parted,sudo,wget,vim \
	$RELEASE $INSTALL_DIR $MIRROR
echo "==> Done!"

echo "==> Mounting /proc and /dev/pts in chroot"
chroot $INSTALL_DIR mount proc /proc -t proc
mkdir -p $INSTALL_DIR/dev/pts
mount --bind /dev/pts $INSTALL_DIR/dev/pts

echo "==> Setting TZ to UTC"
rm $INSTALL_DIR/etc/localtime
cp $INSTALL_DIR/usr/share/zoneinfo/UTC $INSTALL_DIR/etc/localtime

echo "==> Setting locale to en_US.UTF-8"
echo "en_US.UTF-8 UTF-8" >> $INSTALL_DIR/etc/locale.gen
echo "LANG=\"en_US.UTF-8\"" > $INSTALL_DIR/etc/default/locale
chroot $INSTALL_DIR locale-gen

echo "==> Updating $INSTALL_DIR/etc/apt/sources.list"
cat << SOURCES > $INSTALL_DIR/etc/apt/sources.list
deb http://httpredir.debian.org/debian $RELEASE main
deb-src http://httpredir.debian.org/debian $RELEASE main

deb http://httpredir.debian.org/debian $RELEASE-updates main
deb-src http://httpredir.debian.org/debian $RELEASE-updates main

deb http://security.debian.org/ $RELEASE/updates  main
deb-src http://security.debian.org/ $RELEASE/updates  main
SOURCES

echo "==> Updating packages"
export DEBIAN_FRONTEND=noninteractive
chroot $INSTALL_DIR apt-get -qq update
chroot $INSTALL_DIR apt-get -qq upgrade

# Get release version via os-release
VERSION_ID=
# shellcheck source=/dev/null
CHECK_VERSION=$(. $INSTALL_DIR/etc/os-release && echo $VERSION_ID)

echo "==> Installing additional packages"
if [[ "$CHECK_VERSION" -ge 9 ]] || [[ -z "$CHECK_VERSION" ]]; then
	chroot $INSTALL_DIR apt-get -qq install --no-install-recommends software-properties-common
else
	chroot $INSTALL_DIR apt-get -qq install --no-install-recommends python-software-properties software-properties-common
fi

if [[ "$CHECK_VERSION" -ge 8 ]]; then
	# Pin udev version for Debian 8 and newer
	# See https://github.com/joyent/smartos-live/issues/596
	echo "==> Pinning udev package"
	cat <<-UDEV > $INSTALL_DIR/etc/apt/preferences.d/udev
		Package: udev
		Pin: release *
		Pin-Priority: -1
		UDEV

	# Systemd overrides Debian 8 and newer
	#
	# See:
	#   - https://github.com/joyent/centos-lx-brand-image-builder/issues/5
	#   - https://github.com/joyent/centos-lx-brand-image-builder/issues/7
	#   - https://smartos.org/bugview/OS-5304
	#
	# TODO: This should be removed when the relevant cgroup etc support is in
	# the platform.
	SERVICES=( systemd-hostnamed systemd-localed systemd-timedated )

	for SERVICE in "${SERVICES[@]}"; do
		echo "==> Adding systemd overrides for: ${SERVICE}"
		OVERRIDE_DIR=$INSTALL_DIR/etc/systemd/system/${SERVICE}.service.d
		mkdir -p $OVERRIDE_DIR

		cat <<-OVERRIDE > ${OVERRIDE_DIR}/override.conf
		[Service]
		PrivateTmp=no
		PrivateDevices=no
		PrivateNetwork=no
		ProtectSystem=no
		ProtectHome=no
		OVERRIDE
	done
fi

echo "==> Cleaning up caches etc."
chroot $INSTALL_DIR apt-get -qq autoremove
chroot $INSTALL_DIR apt-get -qq clean

echo "==> Disabling PasswordAuthentication"
sed -ri s/^#?PasswordAuthentication\ no/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config
sed -ri s/^#?PasswordAuthentication\ yes/PasswordAuthentication\ no/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Setting UsePrivilegeSeparation"
# The sandbox value causes an issue with lx-brand. Change to "yes"
sed -ri s/^#UsePrivilegeSeparation\ sandbox/UsePrivilegeSeparation\ yes/ -i $INSTALL_DIR/etc/ssh/sshd_config

echo "==> Creating /etc/motd"
cat << MOTD > $INSTALL_DIR/etc/motd
   __        .                   .
 _|  |_      | .-. .  . .-. :--. |-
|_    _|     ;|   ||  |(.-' |  | |
  |__|   \`--'  \`-' \`;-| \`-' '  ' \`-'
                   /  ;  Instance ($NAME $BUILD_DATE)
                   \`-'   $DOCS

MOTD

echo "==> Creating /etc/product file"
cat << PRODUCT > $INSTALL_DIR/etc/product
Name: Joyent Instance
Image: $NAME $BUILD_DATE
Documentation: $DOCS
Description: $DESC
PRODUCT

echo "==> Installing Guest tools in $INSTALL_DIR"
echo "====> Initiallizing and fetching submodule $GUESTTOOLS"
git submodule init
git submodule update

echo "====> Running ./install.sh -i $INSTALL_DIR"
(
	cd $GUESTTOOLS
	./install.sh -i $INSTALL_DIR
)

echo "==> Installing dtracetools-lx in $INSTALL_DIR"
echo "====> Downloading package and SHASUMs from https://us-east.manta.joyent.com/joyentsoln/public/"

DTRACE_PACKAGE="dtracetools-lx_1.0_amd64.deb"
D_PKG_SHASUM="shasum256.txt"

curl -sSLO https://us-east.manta.joyent.com/joyentsoln/public/images/lx-brand/devel/packages/${DTRACE_PACKAGE}
curl -sSLO https://us-east.manta.joyent.com/joyentsoln/public/images/lx-brand/devel/packages/${D_PKG_SHASUM}

echo "====> Verifying package"
grep " ${DTRACE_PACKAGE}\$" ${D_PKG_SHASUM} | sha256sum -c -

echo "====> Installing into $INSTALL_DIR"
dpkg --root $INSTALL_DIR -i ${DTRACE_PACKAGE}

echo "==> Saving installation as $TARGET. This may take a few minutes."
tar czf $TARGET --exclude-from=exclude.txt $INSTALL_DIR/

echo "==> Installation complete!"
echo "==> $TARGET"

# umount previous /proc and /dev/pts if they exist
umount_chroot

exit 0
